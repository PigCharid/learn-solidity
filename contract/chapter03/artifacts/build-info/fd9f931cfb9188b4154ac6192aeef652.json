{
	"id": "fd9f931cfb9188b4154ac6192aeef652",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"study/chapter03/1innercompany.sol": {
				"content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8;  \n\ncontract Company{\n    \n    function moneyTest()external pure {\n        assert(1 wei == 1);\n        assert(1 gwei == 1e9);\n        assert(1 ether == 1e18);\n    }\n\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"study/chapter03/1innercompany.sol": {
				"Company": {
					"abi": [
						{
							"inputs": [],
							"name": "moneyTest",
							"outputs": [],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"study/chapter03/1innercompany.sol\":56:219  contract Company{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"study/chapter03/1innercompany.sol\":56:219  contract Company{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x5af50ca4\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"study/chapter03/1innercompany.sol\":83:216  function moneyTest()external pure {... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n        /* \"study/chapter03/1innercompany.sol\":143:144  1 */\n      0x01\n        /* \"study/chapter03/1innercompany.sol\":134:139  1 wei */\n      dup1\n        /* \"study/chapter03/1innercompany.sol\":134:144  1 wei == 1 */\n      eq\n        /* \"study/chapter03/1innercompany.sol\":127:145  assert(1 wei == 1) */\n      tag_7\n      jumpi\n      tag_8\n      tag_9\n      jump\t// in\n    tag_8:\n    tag_7:\n        /* \"study/chapter03/1innercompany.sol\":172:175  1e9 */\n      0x3b9aca00\n        /* \"study/chapter03/1innercompany.sol\":162:168  1 gwei */\n      dup1\n        /* \"study/chapter03/1innercompany.sol\":162:175  1 gwei == 1e9 */\n      eq\n        /* \"study/chapter03/1innercompany.sol\":155:176  assert(1 gwei == 1e9) */\n      tag_10\n      jumpi\n      tag_11\n      tag_9\n      jump\t// in\n    tag_11:\n    tag_10:\n        /* \"study/chapter03/1innercompany.sol\":204:208  1e18 */\n      0x0de0b6b3a7640000\n        /* \"study/chapter03/1innercompany.sol\":193:200  1 ether */\n      dup1\n        /* \"study/chapter03/1innercompany.sol\":193:208  1 ether == 1e18 */\n      eq\n        /* \"study/chapter03/1innercompany.sol\":186:209  assert(1 ether == 1e18) */\n      tag_12\n      jumpi\n      tag_13\n      tag_9\n      jump\t// in\n    tag_13:\n    tag_12:\n        /* \"study/chapter03/1innercompany.sol\":83:216  function moneyTest()external pure {... */\n      jump\t// out\n        /* \"#utility.yul\":7:187   */\n    tag_9:\n        /* \"#utility.yul\":55:132   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":52:53   */\n      0x00\n        /* \"#utility.yul\":45:133   */\n      mstore\n        /* \"#utility.yul\":152:156   */\n      0x01\n        /* \"#utility.yul\":149:150   */\n      0x04\n        /* \"#utility.yul\":142:157   */\n      mstore\n        /* \"#utility.yul\":176:180   */\n      0x24\n        /* \"#utility.yul\":173:174   */\n      0x00\n        /* \"#utility.yul\":166:181   */\n      revert\n\n    auxdata: 0xa2646970667358221220cac126db208785ff2aeffe1080f90b3703131057012282e0a17d7617a0236cce64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b5060d08061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635af50ca414602d575b600080fd5b60336035565b005b600180146043576042606b565b5b633b9aca0080146054576053606b565b5b670de0b6b3a764000080146069576068606b565b5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea2646970667358221220cac126db208785ff2aeffe1080f90b3703131057012282e0a17d7617a0236cce64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD0 DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5AF50CA4 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 DUP1 EQ PUSH1 0x43 JUMPI PUSH1 0x42 PUSH1 0x6B JUMP JUMPDEST JUMPDEST PUSH4 0x3B9ACA00 DUP1 EQ PUSH1 0x54 JUMPI PUSH1 0x53 PUSH1 0x6B JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH1 0x69 JUMPI PUSH1 0x68 PUSH1 0x6B JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0xC1 0x26 0xDB KECCAK256 DUP8 DUP6 SELFDESTRUCT 0x2A 0xEF INVALID LT DUP1 0xF9 SIGNEXTEND CALLDATACOPY SUB SGT LT JUMPI ADD 0x22 DUP3 0xE0 LOG1 PUSH30 0x7617A0236CCE64736F6C6343000807003300000000000000000000000000 ",
							"sourceMap": "56:163:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@moneyTest_23": {
									"entryPoint": 53,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x01": {
									"entryPoint": 107,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:190:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "35:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "52:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "55:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "45:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "45:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "45:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "149:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "152:4:1",
																		"type": "",
																		"value": "0x01"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "142:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "142:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "142:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "173:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "176:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:15:1"
														}
													]
												},
												"name": "panic_error_0x01",
												"nodeType": "YulFunctionDefinition",
												"src": "7:180:1"
											}
										]
									},
									"contents": "{\n\n    function panic_error_0x01() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c80635af50ca414602d575b600080fd5b60336035565b005b600180146043576042606b565b5b633b9aca0080146054576053606b565b5b670de0b6b3a764000080146069576068606b565b5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea2646970667358221220cac126db208785ff2aeffe1080f90b3703131057012282e0a17d7617a0236cce64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5AF50CA4 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 DUP1 EQ PUSH1 0x43 JUMPI PUSH1 0x42 PUSH1 0x6B JUMP JUMPDEST JUMPDEST PUSH4 0x3B9ACA00 DUP1 EQ PUSH1 0x54 JUMPI PUSH1 0x53 PUSH1 0x6B JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH1 0x69 JUMPI PUSH1 0x68 PUSH1 0x6B JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0xC1 0x26 0xDB KECCAK256 DUP8 DUP6 SELFDESTRUCT 0x2A 0xEF INVALID LT DUP1 0xF9 SIGNEXTEND CALLDATACOPY SUB SGT LT JUMPI ADD 0x22 DUP3 0xE0 LOG1 PUSH30 0x7617A0236CCE64736F6C6343000807003300000000000000000000000000 ",
							"sourceMap": "56:163:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;83:133;;;:::i;:::-;;;143:1;134:5;:10;127:18;;;;:::i;:::-;;172:3;162:6;:13;155:21;;;;:::i;:::-;;204:4;193:7;:15;186:23;;;;:::i;:::-;;83:133::o;7:180:1:-;55:77;52:1;45:88;152:4;149:1;142:15;176:4;173:1;166:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "41600",
								"executionCost": "93",
								"totalCost": "41693"
							},
							"external": {
								"moneyTest()": "191"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 56,
									"end": 219,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 56,
									"end": 219,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 56,
									"end": 219,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 56,
									"end": 219,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 219,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 56,
									"end": 219,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 56,
									"end": 219,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 56,
									"end": 219,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 219,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 56,
									"end": 219,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 219,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cac126db208785ff2aeffe1080f90b3703131057012282e0a17d7617a0236cce64736f6c63430008070033",
									".code": [
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH",
											"source": 0,
											"value": "5AF50CA4"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 56,
											"end": 219,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 56,
											"end": 219,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 83,
											"end": 216,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 83,
											"end": 216,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83,
											"end": 216,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 83,
											"end": 216,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 83,
											"end": 216,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 83,
											"end": 216,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 83,
											"end": 216,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83,
											"end": 216,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 83,
											"end": 216,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 83,
											"end": 216,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 143,
											"end": 144,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 134,
											"end": 144,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 127,
											"end": 145,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 127,
											"end": 145,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 127,
											"end": 145,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 127,
											"end": 145,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 127,
											"end": 145,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 127,
											"end": 145,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 127,
											"end": 145,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 127,
											"end": 145,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 127,
											"end": 145,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 172,
											"end": 175,
											"name": "PUSH",
											"source": 0,
											"value": "3B9ACA00"
										},
										{
											"begin": 162,
											"end": 168,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 162,
											"end": 175,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 155,
											"end": 176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 155,
											"end": 176,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 155,
											"end": 176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 155,
											"end": 176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 155,
											"end": 176,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 155,
											"end": 176,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 155,
											"end": 176,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 155,
											"end": 176,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 155,
											"end": 176,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 204,
											"end": 208,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 193,
											"end": 200,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 193,
											"end": 208,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 186,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 186,
											"end": 209,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 186,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 186,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 186,
											"end": 209,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 186,
											"end": 209,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 186,
											"end": 209,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 186,
											"end": 209,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 186,
											"end": 209,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83,
											"end": 216,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 187,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 7,
											"end": 187,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 55,
											"end": 132,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 52,
											"end": 53,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 45,
											"end": 133,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 152,
											"end": 156,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 149,
											"end": 150,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 142,
											"end": 157,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 180,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 173,
											"end": 174,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 166,
											"end": 181,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"moneyTest()": "5af50ca4"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"moneyTest\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"study/chapter03/1innercompany.sol\":\"Company\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"study/chapter03/1innercompany.sol\":{\"keccak256\":\"0x514734d1a74374ae2a858dce1aa529d94216d7a00a037a9f423499fd4e75b782\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95be573a9f75338529339210e6cdf158216dd5a29ae456f9587b586bac5ec1ae\",\"dweb:/ipfs/QmckxjbPSVjvTW24eVX3WDbP8bipCwUZhJLJehwqYD66a4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"study/chapter03/1innercompany.sol": {
				"ast": {
					"absolutePath": "study/chapter03/1innercompany.sol",
					"exportedSymbols": {
						"Company": [
							24
						]
					},
					"id": 25,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8"
							],
							"nodeType": "PragmaDirective",
							"src": "31:21:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 24,
							"linearizedBaseContracts": [
								24
							],
							"name": "Company",
							"nameLocation": "65:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "117:99:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 7,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 5,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "134:5:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 6,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "143:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "134:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 4,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "127:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 8,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "127:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 9,
												"nodeType": "ExpressionStatement",
												"src": "127:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 13,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 11,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "162:6:0",
																"subdenomination": "gwei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "316539",
																"id": 12,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "172:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																},
																"value": "1e9"
															},
															"src": "162:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 10,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "155:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "155:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 15,
												"nodeType": "ExpressionStatement",
												"src": "155:21:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 17,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "193:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 18,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "204:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "193:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 16,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "186:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "186:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "186:23:0"
											}
										]
									},
									"functionSelector": "5af50ca4",
									"id": 23,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "moneyTest",
									"nameLocation": "92:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "101:2:0"
									},
									"returnParameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "117:0:0"
									},
									"scope": 24,
									"src": "83:133:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 25,
							"src": "56:163:0",
							"usedErrors": []
						}
					],
					"src": "31:188:0"
				},
				"id": 0
			}
		}
	}
}