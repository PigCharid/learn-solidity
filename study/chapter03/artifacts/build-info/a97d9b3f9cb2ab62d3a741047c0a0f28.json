{
	"id": "a97d9b3f9cb2ab62d3a741047c0a0f28",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"study/chapter03/1innercompany.sol": {
				"content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8;  \n\ncontract Company{\n    \n    function moneyTest()external pure returns(bool){\n        assert(1 wei == 1);\n        assert(1 gwei == 1e9);\n        assert(1 ether == 1e18);\n    }\n\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"study/chapter03/1innercompany.sol": {
				"Company": {
					"abi": [
						{
							"inputs": [],
							"name": "moneyTest",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"study/chapter03/1innercompany.sol\":56:232  contract Company{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"study/chapter03/1innercompany.sol\":56:232  contract Company{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x5af50ca4\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"study/chapter03/1innercompany.sol\":83:229  function moneyTest()external pure returns(bool){... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_6\n      swap2\n      swap1\n      tag_7\n      jump\t// in\n    tag_6:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_5:\n        /* \"study/chapter03/1innercompany.sol\":125:129  bool */\n      0x00\n        /* \"study/chapter03/1innercompany.sol\":156:157  1 */\n      0x01\n        /* \"study/chapter03/1innercompany.sol\":147:152  1 wei */\n      dup1\n        /* \"study/chapter03/1innercompany.sol\":147:157  1 wei == 1 */\n      eq\n        /* \"study/chapter03/1innercompany.sol\":140:158  assert(1 wei == 1) */\n      tag_9\n      jumpi\n      tag_10\n      tag_11\n      jump\t// in\n    tag_10:\n    tag_9:\n        /* \"study/chapter03/1innercompany.sol\":185:188  1e9 */\n      0x3b9aca00\n        /* \"study/chapter03/1innercompany.sol\":175:181  1 gwei */\n      dup1\n        /* \"study/chapter03/1innercompany.sol\":175:188  1 gwei == 1e9 */\n      eq\n        /* \"study/chapter03/1innercompany.sol\":168:189  assert(1 gwei == 1e9) */\n      tag_12\n      jumpi\n      tag_13\n      tag_11\n      jump\t// in\n    tag_13:\n    tag_12:\n        /* \"study/chapter03/1innercompany.sol\":217:221  1e18 */\n      0x0de0b6b3a7640000\n        /* \"study/chapter03/1innercompany.sol\":206:213  1 ether */\n      dup1\n        /* \"study/chapter03/1innercompany.sol\":206:221  1 ether == 1e18 */\n      eq\n        /* \"study/chapter03/1innercompany.sol\":199:222  assert(1 ether == 1e18) */\n      tag_14\n      jumpi\n      tag_15\n      tag_11\n      jump\t// in\n    tag_15:\n    tag_14:\n        /* \"study/chapter03/1innercompany.sol\":83:229  function moneyTest()external pure returns(bool){... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:116   */\n    tag_17:\n        /* \"#utility.yul\":88:109   */\n      tag_19\n        /* \"#utility.yul\":103:108   */\n      dup2\n        /* \"#utility.yul\":88:109   */\n      tag_20\n      jump\t// in\n    tag_19:\n        /* \"#utility.yul\":83:86   */\n      dup3\n        /* \"#utility.yul\":76:110   */\n      mstore\n        /* \"#utility.yul\":7:116   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":122:332   */\n    tag_7:\n        /* \"#utility.yul\":209:213   */\n      0x00\n        /* \"#utility.yul\":247:249   */\n      0x20\n        /* \"#utility.yul\":236:245   */\n      dup3\n        /* \"#utility.yul\":232:250   */\n      add\n        /* \"#utility.yul\":224:250   */\n      swap1\n      pop\n        /* \"#utility.yul\":260:325   */\n      tag_22\n        /* \"#utility.yul\":322:323   */\n      0x00\n        /* \"#utility.yul\":311:320   */\n      dup4\n        /* \"#utility.yul\":307:324   */\n      add\n        /* \"#utility.yul\":298:304   */\n      dup5\n        /* \"#utility.yul\":260:325   */\n      tag_17\n      jump\t// in\n    tag_22:\n        /* \"#utility.yul\":122:332   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":338:428   */\n    tag_20:\n        /* \"#utility.yul\":372:379   */\n      0x00\n        /* \"#utility.yul\":415:420   */\n      dup2\n        /* \"#utility.yul\":408:421   */\n      iszero\n        /* \"#utility.yul\":401:422   */\n      iszero\n        /* \"#utility.yul\":390:422   */\n      swap1\n      pop\n        /* \"#utility.yul\":338:428   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":434:614   */\n    tag_11:\n        /* \"#utility.yul\":482:559   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":479:480   */\n      0x00\n        /* \"#utility.yul\":472:560   */\n      mstore\n        /* \"#utility.yul\":579:583   */\n      0x01\n        /* \"#utility.yul\":576:577   */\n      0x04\n        /* \"#utility.yul\":569:584   */\n      mstore\n        /* \"#utility.yul\":603:607   */\n      0x24\n        /* \"#utility.yul\":600:601   */\n      0x00\n        /* \"#utility.yul\":593:608   */\n      revert\n\n    auxdata: 0xa26469706673582212208731a6129a35861fb94d89311cf514bc874f290e1f64763f7f54c1e25e288d8464736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610117806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635af50ca414602d575b600080fd5b60336047565b604051603e9190608d565b60405180910390f35b600060018014605757605660b2565b5b633b9aca008014606857606760b2565b5b670de0b6b3a76400008014607d57607c60b2565b5b90565b60878160a6565b82525050565b600060208201905060a060008301846080565b92915050565b60008115159050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212208731a6129a35861fb94d89311cf514bc874f290e1f64763f7f54c1e25e288d8464736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x117 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5AF50CA4 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0x8D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 EQ PUSH1 0x57 JUMPI PUSH1 0x56 PUSH1 0xB2 JUMP JUMPDEST JUMPDEST PUSH4 0x3B9ACA00 DUP1 EQ PUSH1 0x68 JUMPI PUSH1 0x67 PUSH1 0xB2 JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH1 0x7D JUMPI PUSH1 0x7C PUSH1 0xB2 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x87 DUP2 PUSH1 0xA6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xA0 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x80 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 BALANCE 0xA6 SLT SWAP11 CALLDATALOAD DUP7 0x1F 0xB9 0x4D DUP10 BALANCE SHR CREATE2 EQ 0xBC DUP8 0x4F 0x29 0xE 0x1F PUSH5 0x763F7F54C1 0xE2 0x5E 0x28 DUP14 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "56:176:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@moneyTest_25": {
									"entryPoint": 71,
									"id": 25,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 128,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 141,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 166,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x01": {
									"entryPoint": 178,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:617:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "66:50:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "83:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "103:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "88:14:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "88:21:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "76:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "76:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "76:34:1"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "54:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "61:3:1",
														"type": ""
													}
												],
												"src": "7:109:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "214:118:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "224:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "236:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "247:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "224:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "298:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "311:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "322:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "307:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "307:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "260:37:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "260:65:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "260:65:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "186:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "198:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "209:4:1",
														"type": ""
													}
												],
												"src": "122:210:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "380:48:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "390:32:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "415:5:1"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "408:6:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "408:13:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "401:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "401:21:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "390:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "362:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "372:7:1",
														"type": ""
													}
												],
												"src": "338:90:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "462:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "479:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "482:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "472:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "472:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "472:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "576:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "579:4:1",
																		"type": "",
																		"value": "0x01"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "569:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "569:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "569:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "600:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "603:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "593:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "593:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "593:15:1"
														}
													]
												},
												"name": "panic_error_0x01",
												"nodeType": "YulFunctionDefinition",
												"src": "434:180:1"
											}
										]
									},
									"contents": "{\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function panic_error_0x01() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c80635af50ca414602d575b600080fd5b60336047565b604051603e9190608d565b60405180910390f35b600060018014605757605660b2565b5b633b9aca008014606857606760b2565b5b670de0b6b3a76400008014607d57607c60b2565b5b90565b60878160a6565b82525050565b600060208201905060a060008301846080565b92915050565b60008115159050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212208731a6129a35861fb94d89311cf514bc874f290e1f64763f7f54c1e25e288d8464736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5AF50CA4 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0x8D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 EQ PUSH1 0x57 JUMPI PUSH1 0x56 PUSH1 0xB2 JUMP JUMPDEST JUMPDEST PUSH4 0x3B9ACA00 DUP1 EQ PUSH1 0x68 JUMPI PUSH1 0x67 PUSH1 0xB2 JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH1 0x7D JUMPI PUSH1 0x7C PUSH1 0xB2 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x87 DUP2 PUSH1 0xA6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xA0 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x80 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 BALANCE 0xA6 SLT SWAP11 CALLDATALOAD DUP7 0x1F 0xB9 0x4D DUP10 BALANCE SHR CREATE2 EQ 0xBC DUP8 0x4F 0x29 0xE 0x1F PUSH5 0x763F7F54C1 0xE2 0x5E 0x28 DUP14 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "56:176:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;83:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;125:4;156:1;147:5;:10;140:18;;;;:::i;:::-;;185:3;175:6;:13;168:21;;;;:::i;:::-;;217:4;206:7;:15;199:23;;;;:::i;:::-;;83:146;:::o;7:109:1:-;88:21;103:5;88:21;:::i;:::-;83:3;76:34;7:109;;:::o;122:210::-;209:4;247:2;236:9;232:18;224:26;;260:65;322:1;311:9;307:17;298:6;260:65;:::i;:::-;122:210;;;;:::o;338:90::-;372:7;415:5;408:13;401:21;390:32;;338:90;;;:::o;434:180::-;482:77;479:1;472:88;579:4;576:1;569:15;603:4;600:1;593:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "55800",
								"executionCost": "105",
								"totalCost": "55905"
							},
							"external": {
								"moneyTest()": "382"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 56,
									"end": 232,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 56,
									"end": 232,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 56,
									"end": 232,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 56,
									"end": 232,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 232,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 56,
									"end": 232,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 56,
									"end": 232,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 56,
									"end": 232,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 232,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 56,
									"end": 232,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 232,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208731a6129a35861fb94d89311cf514bc874f290e1f64763f7f54c1e25e288d8464736f6c63430008070033",
									".code": [
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH",
											"source": 0,
											"value": "5AF50CA4"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 56,
											"end": 232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 56,
											"end": 232,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 83,
											"end": 229,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 125,
											"end": 129,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 156,
											"end": 157,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 147,
											"end": 152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 147,
											"end": 157,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 140,
											"end": 158,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 140,
											"end": 158,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 140,
											"end": 158,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 140,
											"end": 158,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 140,
											"end": 158,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 140,
											"end": 158,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 140,
											"end": 158,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 140,
											"end": 158,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 140,
											"end": 158,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 185,
											"end": 188,
											"name": "PUSH",
											"source": 0,
											"value": "3B9ACA00"
										},
										{
											"begin": 175,
											"end": 181,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 175,
											"end": 188,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 168,
											"end": 189,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 168,
											"end": 189,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 168,
											"end": 189,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 168,
											"end": 189,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 168,
											"end": 189,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 168,
											"end": 189,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 168,
											"end": 189,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 168,
											"end": 189,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 168,
											"end": 189,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 217,
											"end": 221,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 206,
											"end": 213,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 206,
											"end": 221,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 199,
											"end": 222,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 199,
											"end": 222,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 199,
											"end": 222,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 199,
											"end": 222,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 199,
											"end": 222,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 199,
											"end": 222,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 199,
											"end": 222,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 199,
											"end": 222,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 199,
											"end": 222,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83,
											"end": 229,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 116,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 7,
											"end": 116,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 88,
											"end": 109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 103,
											"end": 108,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 88,
											"end": 109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 88,
											"end": 109,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 88,
											"end": 109,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 88,
											"end": 109,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 83,
											"end": 86,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 76,
											"end": 110,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7,
											"end": 116,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 116,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 116,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 122,
											"end": 332,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 122,
											"end": 332,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 209,
											"end": 213,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 249,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 236,
											"end": 245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 232,
											"end": 250,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 224,
											"end": 250,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 224,
											"end": 250,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 260,
											"end": 325,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 322,
											"end": 323,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 311,
											"end": 320,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 307,
											"end": 324,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 298,
											"end": 304,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 260,
											"end": 325,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 260,
											"end": 325,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 260,
											"end": 325,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 260,
											"end": 325,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 338,
											"end": 428,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 428,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 372,
											"end": 379,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 420,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 408,
											"end": 421,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 401,
											"end": 422,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 390,
											"end": 422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 390,
											"end": 422,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 338,
											"end": 428,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 338,
											"end": 428,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 428,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 338,
											"end": 428,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 434,
											"end": 614,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 434,
											"end": 614,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 482,
											"end": 559,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 479,
											"end": 480,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 472,
											"end": 560,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 579,
											"end": 583,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 576,
											"end": 577,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 569,
											"end": 584,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 603,
											"end": 607,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 600,
											"end": 601,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 593,
											"end": 608,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"moneyTest()": "5af50ca4"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"moneyTest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"study/chapter03/1innercompany.sol\":\"Company\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"study/chapter03/1innercompany.sol\":{\"keccak256\":\"0x5de2940998c7048dce041578b4fd05b4d648d11b7e86ec1e2c7c353a9a373adc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cfb9cf05fbe6618010978e5688c7a3d1ee5c091b5c5881aae3f7cf7c511ad28\",\"dweb:/ipfs/QmaF1kGExoFr6EddqB1wzgNkrMq7kM5iCdFziHayK25XXQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n --> study/chapter03/1innercompany.sol:6:47:\n  |\n6 |     function moneyTest()external pure returns(bool){\n  |                                               ^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 129,
					"file": "study/chapter03/1innercompany.sol",
					"start": 125
				},
				"type": "Warning"
			}
		],
		"sources": {
			"study/chapter03/1innercompany.sol": {
				"ast": {
					"absolutePath": "study/chapter03/1innercompany.sol",
					"exportedSymbols": {
						"Company": [
							26
						]
					},
					"id": 27,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8"
							],
							"nodeType": "PragmaDirective",
							"src": "31:21:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 26,
							"linearizedBaseContracts": [
								26
							],
							"name": "Company",
							"nameLocation": "65:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "130:99:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 9,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 7,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "147:5:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 8,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "156:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "147:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 6,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "140:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 10,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "140:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 11,
												"nodeType": "ExpressionStatement",
												"src": "140:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 15,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 13,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "175:6:0",
																"subdenomination": "gwei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "316539",
																"id": 14,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "185:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																},
																"value": "1e9"
															},
															"src": "175:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 12,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "168:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "168:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 17,
												"nodeType": "ExpressionStatement",
												"src": "168:21:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 21,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 19,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "206:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 20,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "217:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "206:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 18,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "199:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 22,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "199:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 23,
												"nodeType": "ExpressionStatement",
												"src": "199:23:0"
											}
										]
									},
									"functionSelector": "5af50ca4",
									"id": 25,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "moneyTest",
									"nameLocation": "92:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "101:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "125:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "125:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "124:6:0"
									},
									"scope": 26,
									"src": "83:146:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 27,
							"src": "56:176:0",
							"usedErrors": []
						}
					],
					"src": "31:201:0"
				},
				"id": 0
			}
		}
	}
}