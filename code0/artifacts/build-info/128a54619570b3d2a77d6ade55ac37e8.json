{
	"id": "128a54619570b3d2a77d6ade55ac37e8",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.10",
	"solcLongVersion": "0.8.10+commit.fc410830",
	"input": {
		"language": "Solidity",
		"sources": {
			"code1/4outsidefunc.sol": {
				"content": "pragma solidity ^0.8;\n\nfunction add(uint x)view returns(uint){\n    return x*2;\n}\ncontract TestFuncOut{\n    \n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"code1/4outsidefunc.sol": {
				"TestFuncOut": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"code1/4outsidefunc.sol\":81:109  contract TestFuncOut{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"code1/4outsidefunc.sol\":81:109  contract TestFuncOut{... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220dcb32a79d17f67c62029f3655de0b4298f620f06f6536c6e43ba106ca6e3c2fb64736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220dcb32a79d17f67c62029f3655de0b4298f620f06f6536c6e43ba106ca6e3c2fb64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC 0xB3 0x2A PUSH26 0xD17F67C62029F3655DE0B4298F620F06F6536C6E43BA106CA6E3 0xC2 0xFB PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "81:28:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea2646970667358221220dcb32a79d17f67c62029f3655de0b4298f620f06f6536c6e43ba106ca6e3c2fb64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC 0xB3 0x2A PUSH26 0xD17F67C62029F3655DE0B4298F620F06F6536C6E43BA106CA6E3 0xC2 0xFB PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "81:28:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 81,
									"end": 109,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 81,
									"end": 109,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 81,
									"end": 109,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 81,
									"end": 109,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 81,
									"end": 109,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 81,
									"end": 109,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 81,
									"end": 109,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 81,
									"end": 109,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 81,
									"end": 109,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 81,
									"end": 109,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 81,
									"end": 109,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dcb32a79d17f67c62029f3655de0b4298f620f06f6536c6e43ba106ca6e3c2fb64736f6c634300080a0033",
									".code": [
										{
											"begin": 81,
											"end": 109,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 81,
											"end": 109,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81,
											"end": 109,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81,
											"end": 109,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81,
											"end": 109,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 81,
											"end": 109,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"code1/4outsidefunc.sol\":\"TestFuncOut\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"code1/4outsidefunc.sol\":{\"keccak256\":\"0x30b090586376f5afd0dc6bd91ae5067b73ea17350ab453cd942d02c4ab245fd0\",\"urls\":[\"bzz-raw://72508510a2604c4723e029b927fcafcb6afddfb9800dc26af2c744705921e27a\",\"dweb:/ipfs/QmNSd741qVbQrgg1wbPcMaxJdS4PNG8uz3CZyaSBF1i5DB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> code1/4outsidefunc.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "code1/4outsidefunc.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n --> code1/4outsidefunc.sol:3:1:\n  |\n3 | function add(uint x)view returns(uint){\n  | ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 80,
					"file": "code1/4outsidefunc.sol",
					"start": 23
				},
				"type": "Warning"
			}
		],
		"sources": {
			"code1/4outsidefunc.sol": {
				"ast": {
					"absolutePath": "code1/4outsidefunc.sol",
					"exportedSymbols": {
						"TestFuncOut": [
							14
						],
						"add": [
							13
						]
					},
					"id": 15,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8"
							],
							"nodeType": "PragmaDirective",
							"src": "0:21:0"
						},
						{
							"body": {
								"id": 12,
								"nodeType": "Block",
								"src": "61:19:0",
								"statements": [
									{
										"expression": {
											"commonType": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"id": 10,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftExpression": {
												"id": 8,
												"name": "x",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 3,
												"src": "74:1:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "*",
											"rightExpression": {
												"hexValue": "32",
												"id": 9,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "76:1:0",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_2_by_1",
													"typeString": "int_const 2"
												},
												"value": "2"
											},
											"src": "74:3:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"functionReturnParameters": 7,
										"id": 11,
										"nodeType": "Return",
										"src": "67:10:0"
									}
								]
							},
							"id": 13,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "add",
							"nameLocation": "32:3:0",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 4,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 3,
										"mutability": "mutable",
										"name": "x",
										"nameLocation": "41:1:0",
										"nodeType": "VariableDeclaration",
										"scope": 13,
										"src": "36:6:0",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 2,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "36:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35:8:0"
							},
							"returnParameters": {
								"id": 7,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 6,
										"mutability": "mutable",
										"name": "",
										"nameLocation": "-1:-1:-1",
										"nodeType": "VariableDeclaration",
										"scope": 13,
										"src": "56:4:0",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 5,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "56:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "55:6:0"
							},
							"scope": 15,
							"src": "23:57:0",
							"stateMutability": "view",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TestFuncOut",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 14,
							"linearizedBaseContracts": [
								14
							],
							"name": "TestFuncOut",
							"nameLocation": "90:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 15,
							"src": "81:28:0",
							"usedErrors": []
						}
					],
					"src": "0:109:0"
				},
				"id": 0
			}
		}
	}
}